#!/bin/sh
set -e

# Just set this to zero if you'd rather keep the build directory around.
DO_CLEANUP=1

# Attempts to determine the number of cores in the CPU
# Source: https://gist.github.com/jj1bdx/5746298
CPUS=$(getconf _NPROCESSORS_ONLN 2>/dev/null)
[ -z "$CPUS" ] && CPUS=$(getconf NPROCESSORS_ONLN)
[ -z "$CPUS" ] && CPUS=$(ksh93 -c 'getconf NPROCESSORS_ONLN')
[ -z "$CPUS" ] && CPUS=1


# -----------------------------------------------------------------------------
# Deal with existing installations

for f in Slippi-FM*; do
	if [ -d "${f}" ] && [ ! -d "$f/bin" ]; then
		echo "[*] Found incomplete installation at $f/, deleting."
		rm -rf "$f" # is incomplete if bin/ doesn't exist
	fi
done

echo ""
echo "[*] Would you like to overwrite ALL of your previous installations? (y/N) "
read -r RESP
if [ "$RESP" = "y" ] || [ "$RESP" = "Y" ]; then
	echo "[*] Are you sure? This action is not reversible! (y/N) "
	read -r RESP
	if [ "$RESP" = "y" ] || [ "$RESP" = "Y" ] ; then
		rm -rf Slippi-FM*/
		echo "Sucessfully deleted all FM folders!"
	fi
else
	echo "No changes made!"
fi
echo ""

# -----------------------------------------------------------------------------
# Ask the user about udev rules, shortcuts, build options

if [ ! -e /etc/udev/rules.d/51-gcadapter.rules ]; then
	echo "[*] Would you like to install udev rules for your Wii U adapter? (Y/n) "
	read -r RESP
	if [ "$RESP" = "y" ] || [ "$RESP" = "Y" ]; then
		sudo rm -f /etc/udev/rules.d/51-gcadapter.rules
		sudo touch /etc/udev/rules.d/51-gcadapter.rules
		echo 'SUBSYSTEM=="usb", ENV{DEVTYPE}=="usb_device", ATTRS{idVendor}=="057e", ATTRS{idProduct}=="0337", MODE="0666"' | sudo tee /etc/udev/rules.d/51-gcadapter.rules > /dev/null
		sudo udevadm control --reload-rules
		echo "Successfully added udev rules"
	else
		echo "Skipped adding udev rules"
	fi
	echo ""
else
	echo "[*] Looks like you already have Wii U adapter udev rules"
fi

echo "[*] Would you like to make a desktop shortcut? (Y/n) "
read -r RESP
if [ ! "$RESP" = "n" ] && [ ! "$RESP" = "N" ]; then
	SHORTCUTBOOL=1
	echo "A desktop shortcut will be created after building Ishiiruka"
else
	SHORTCUTBOOL=0
	echo "Skipped desktop shortcut creation"
fi
echo ""


# -----------------------------------------------------------------------------
# Set options for targeting a particular release.

# This script assumes the existence of a `$r{SLIPVER}-config.tar.gz` in the 
# root of the installer repository which has the following structure:
#
#	- Sys/
#	- User/
#	- portable.txt
#
# Until we have to deal with managing multiple releases, just rely on this
# file having the current latest Dolphin configuration. Eventually, we need
# to sort out some process for building this config files (mostly by using
# `project-slippi/slippi-ssbm-asm` to compile Gecko codes, etc).

# For now, just deal with building r10 (make this user-configurable later).
COMMITHASH="50f504eb710d1b1e74356e75f8fbef310b811951"
DOLPHIN_REPO="https://github.com/project-slippi/Ishiiruka.git"
SCRIPT_REPO="https://github.com/project-slippi/Slippi-FM-installer"
SLIPVER="r10"

# Path to the tarball containing the Dolphin configuration files
CONFIG_TAR="${SLIPVER}-config.tar.gz"
CONFIG_URL="${SCRIPT_REPO}/raw/master/${CONFIG_TAR}"

echo "[*] Targeting Slippi release: $SLIPVER"
FOLDERNAME="Slippi-FM-${SLIPVER}"
if [ -d "$FOLDERNAME" ]; then
	echo "[*] FM Folder with same version found! Would you like to overwrite? (y/N) "
	read -r RESP
	if [ "$RESP" = "y" ] || [ "$RESP" = "Y" ]; then
		echo "[*] Are you sure? This action is not reversible! (y/N) "
		read -r RESP
		if [ "$RESP" = "y" ] || [ "$RESP" = "Y" ] ; then
			rm -r "$FOLDERNAME"
			echo "Sucessfully deleted $FOLDERNAME"
		else
			echo "[!] Quitting!"
			exit
		fi
	else
		echo "[!] Quitting!"
		exit
	fi
fi
echo ""

echo "[*] CPU Threads detected: $CPUS"
echo "[*] How many threads would you like to use to compile? "
echo "    (passed to make as -j flag, default: 1, range 1-$((CPUS)): "
read -r RESP
if [ "$RESP" -ge 1 ] 2> /dev/null && [ "$RESP" -le $((CPUS + 1)) ] 2> /dev/null; then
	CPUS=$RESP
else
	CPUS=1
fi
echo "[*] Compiling with $CPUS thread(s)!"
echo ""


# -----------------------------------------------------------------------------
# Pull in Dolphin configuration from upstream FM and clone Slippi Ishiiruka

echo ""
mkdir "$FOLDERNAME" && cd "$FOLDERNAME"
echo "[*] Downloading config files..."
curl -LO# $CONFIG_URL
echo "[*] Extracting config files..."
tar -xzf "$CONFIG_TAR" --checkpoint-action='exec=printf "%d/410 records extracted.\r" $TAR_CHECKPOINT' --totals
rm "$CONFIG_TAR"

echo "[*] Cloning from $DOLPHIN_REPO ..."
git clone "$DOLPHIN_REPO" Ishiiruka
cd Ishiiruka
git checkout "$COMMITHASH"

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Hack to avoid using local system's SoundTouch libraries. An in-tree fix 
# should be around in newer commits, so you'll need to update this script when 
# switching off of the release associated with commit 50f504! You can safely 
# remove this sed invocation after this has been sorted in the next release.

echo "[*] Patching CMakeLists to use SoundTouch from Externals .."
sed -i -e '741,746 s/^/#/'  -e '750 s/^/#/' CMakeLists.txt

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# -----------------------------------------------------------------------------
# Add config files into the build directory, then compile Ishiiruka and pull
# out the binary/configuration before deleting the tree

# Go into build directory
mkdir build && cd build

# Move files from config tarball into the Ishiiruka build directory
echo "[*] Moving Slippi/FM config files into the build directory"
mv ../../Binaries .
mv ../Data/dolphin-emu.png Binaries/

# Build Ishiiruka, yielding `dolphin-emu` binaries
cmake .. -DLINUX_LOCAL_DEV=true
make -j $CPUS -s

# Leave build directory (now prepared all config files and binaries)
cd ../..

# Pull out all build artifacts into a bin/ directory for the user
mv Ishiiruka/build/Binaries/ ./bin/
mkdir ./bin/Slippi

if [[ $DO_CLEANUP == 1 ]]; then
	rm -rf Ishiiruka
	rm -f ../launch-slippi-fm
fi

# -----------------------------------------------------------------------------
# Make a symlink to Slippi Ishiiruka, optionally create a shortcut

ln -s "$FOLDERNAME/bin/dolphin-emu" ../launch-slippi-fm
if [ "$SHORTCUTBOOL" -eq 1 ] && [ -d ~/.local/share/applications ]; then
	rm -f ~/.local/share/applications/slippi-fm-$SLIPVER.desktop
	rm -f ~/Desktop/slippi-fm-$SLIPVER.desktop
	touch ~/.local/share/applications/slippi-fm-$SLIPVER.desktop
	EXEPATH="$(pwd)/bin"
	FMNAME="Slippi FM $SLIPVER"
	echo "[Desktop Entry]
Type=Application
GenericName=Wii/GameCube Emulator
Comment=Slippi Ishiiruka fork for SSBM
Categories=Emulator;Game;
Icon=$EXEPATH/dolphin-emu.png
Version=$SLIPVER
Name=$FMNAME
Exec=$EXEPATH/dolphin-emu" | tee ~/.local/share/applications/slippi-fm-$SLIPVER.desktop > /dev/null
	cp ~/.local/share/applications/slippi-fm-$SLIPVER.desktop ~/Desktop
	chmod +x ~/Desktop/slippi-fm-$SLIPVER.desktop
	echo "[*] Created a desktop shortcut"
else
	echo "[!] .local folder not found, skipping desktop shortcut"
fi

echo "[!] All done! Run ./launch-slippi-fm to run the latest installed version!" 
echo "    Alternatively, go to Application > Games or your desktop and select the"
echo "    desired Slippi FM version." 
echo ""
echo "    If you've installed udev rules, make sure to unplug and replug your"
echo "    adapter before opening Dolphin!"
